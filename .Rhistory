card(
card_header("Código combinado"),
verbatimTextOutput("combined_code"),
actionButton("run_combined", "Ejecutar código combinado", class = "btn-success mt-2"),
verbatimTextOutput("combined_result")
)
),
layout_column_wrap(
width = "100%",
card(
card_header("Visualización del código combinado"),
plotOutput("combined_plot", height = "250px")
)
)
),
card(
card_header("Interacción con Datos Externos"),
layout_column_wrap(
width = "400px",
# Panel para cargar datos Excel
card(
card_header("Cargar datos Excel"),
fileInput("excel_file", "Seleccionar archivo Excel:",
accept = c(".xlsx", ".xls")),
selectInput("sheet", "Seleccionar hoja:", choices = NULL),
actionButton("load_data", "Cargar datos", class = "btn-primary"),
verbatimTextOutput("data_preview")
),
# Panel para editar código que utiliza los datos cargados
card(
card_header("Código para analizar datos"),
aceEditor(
outputId = "data_code",
value = '# El dataframe importado está disponible como "imported_data"\n\n# Mostrar las primeras filas\nhead(imported_data, 10)\n\n# Resumen básico\nsummary(imported_data)',
mode = "r",
theme = "chrome",
height = "200px"
),
actionButton("run_data_code", "Ejecutar análisis", class = "btn-success mt-2"),
verbatimTextOutput("data_analysis_result")
)
)
),
card(
card_header("Visualización de datos importados"),
plotOutput("data_plot", height = "300px"),
p("Ejecuta código que genere un gráfico para visualizar los datos importados.")
),
card(
card_header("Código interactivo editable"),
aceEditor(
outputId = "editable_code",
value = 'x <- 1:10\ny <- x^2\nplot(x, y, type = "b", col = "blue", main = "Gráfico cuadrático")',
mode = "r",
theme = "textmate",
height = "150px"
),
actionButton("run_code", "Ejecutar código", class = "btn-primary mt-2"),
card_footer(
plotOutput("result_plot", height = "250px")
)
)
)
server <- function(input, output, session) {
# ---- COMBINAR SCRIPTS CON NUMERACIÓN CONTINUA ----
# Combinar código de los dos editores
combined_code <- reactive({
paste0(input$script_part1, "\n\n", input$script_part2)
})
# Mostrar código combinado
output$combined_code <- renderText({
combined_code()
})
# Ejecutar el código combinado
observeEvent(input$run_combined, {
code <- combined_code()
tryCatch({
# Entorno para ejecutar el código
env <- new.env()
# Capturar la salida de la consola
result_capture <- capture.output({
# Ejecutar el código y guardar resultados en el entorno
eval(parse(text = code), envir = env)
})
# Mostrar resultados de la consola
output$combined_result <- renderPrint({
cat(paste(result_capture, collapse = "\n"))
# Mostrar también las variables creadas
cat("\n\n-- Variables en el entorno --\n")
ls_vars <- ls(env)
for (var_name in ls_vars) {
if (!is.function(env[[var_name]])) {
if (is.data.frame(env[[var_name]])) {
cat(var_name, ": dataframe con ", nrow(env[[var_name]]), " filas y ",
ncol(env[[var_name]]), " columnas\n", sep = "")
} else if (is.vector(env[[var_name]]) && length(env[[var_name]]) <= 10) {
cat(var_name, ": ", paste(env[[var_name]], collapse = ", "), "\n", sep = "")
} else {
cat(var_name, ": objeto de clase ", class(env[[var_name]]), "\n", sep = "")
}
}
}
})
# Intentar generar un gráfico
output$combined_plot <- renderPlot({
# Crear un entorno con los objetos del entorno donde se ejecutó el código
plot_env <- new.env(parent = globalenv())
for (var_name in ls(env)) {
plot_env[[var_name]] <- env[[var_name]]
}
# Crear código de gráfico básico basado en los datos disponibles
if (exists("datos", envir = env) && is.data.frame(env$datos)) {
with(env$datos, plot(mpg, hp, col = "blue", pch = 16,
main = "Relación entre MPG y HP",
xlab = "Millas por galón", ylab = "Caballos de fuerza"))
if (exists("mpg_norm", envir = env$datos) && exists("hp_norm", envir = env$datos)) {
with(env$datos, points(mpg_norm, hp_norm, col = "red", pch = 17))
legend("topright", legend = c("Original", "Normalizado"),
col = c("blue", "red"), pch = c(16, 17))
}
}
})
}, error = function(e) {
output$combined_result <- renderPrint({
cat("Error en la ejecución:", e$message)
})
})
})
# ---- INTERACCIÓN CON DATOS EXTERNOS ----
# Variables reactivas para datos importados
imported_data <- reactiveVal(NULL)
available_sheets <- reactiveVal(NULL)
# Detectar hojas cuando se selecciona un archivo Excel
observeEvent(input$excel_file, {
req(input$excel_file)
sheets <- excel_sheets(input$excel_file$datapath)
available_sheets(sheets)
updateSelectInput(session, "sheet", choices = sheets)
})
# Cargar datos desde Excel
observeEvent(input$load_data, {
req(input$excel_file, input$sheet)
tryCatch({
data <- read_excel(input$excel_file$datapath, sheet = input$sheet)
imported_data(data)
output$data_preview <- renderPrint({
head(data, 5)
})
}, error = function(e) {
output$data_preview <- renderPrint({
cat("Error al cargar los datos:", e$message)
})
})
})
# Ejecutar código para analizar datos importados
observeEvent(input$run_data_code, {
req(imported_data())
tryCatch({
# Crear un entorno para la ejecución segura del código
env <- new.env()
# Asignar los datos importados a este entorno
env$imported_data <- imported_data()
# Ejecutar el código del usuario en este entorno
result_capture <- capture.output(
eval(parse(text = input$data_code), envir = env)
)
# Mostrar resultados
output$data_analysis_result <- renderPrint({
cat(paste(result_capture, collapse = "\n"))
})
# Intentar generar un gráfico si el código lo permite
output$data_plot <- renderPlot({
eval(parse(text = input$data_code), envir = env)
})
}, error = function(e) {
output$data_analysis_result <- renderPrint({
cat("Error en el análisis:", e$message)
})
})
})
# Código interactivo ejecutable
observeEvent(input$run_code, {
tryCatch({
output$result_plot <- renderPlot({
eval(parse(text = input$editable_code))
})
}, error = function(e) {
output$result_plot <- renderPlot({
plot(0, 0, type = "n", axes = FALSE, xlab = "", ylab = "")
text(0, 0, paste("Error:", e$message), col = "red")
})
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(bslib)
library(shinyAce)
library(readxl)
library(dplyr)
ui <- page_fluid(
theme = bs_theme(bootswatch = "flatly"),
h1("Visualización de Código en R con shinyAce"),
card(
card_header("Editores de Código Numerados con Continuidad"),
layout_column_wrap(
width = "400px",
# Primer editor - Primera parte del script
card(
card_header("Primer fragmento (líneas 1-10)"),
aceEditor(
outputId = "script_part1",
value = '# Script parte 1 (líneas 1-10)
# Definir funciones y cargar datos
# Función para normalizar datos
normalizar <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Cargar datos de ejemplo
data(mtcars)
datos <- mtcars[1:10, ]',
mode = "r",
theme = "chrome",
height = "200px",
fontSize = 14,
showLineNumbers = TRUE
)
),
# Segundo editor - Segunda parte del script
card(
card_header("Segundo fragmento (líneas 11-25)"),
aceEditor(
outputId = "script_part2",
value = '# Script parte 2 (continúa desde línea 11)
# Procesar los datos
# Aplicar normalización a algunas columnas
datos$mpg_norm <- normalizar(datos$mpg)
datos$hp_norm <- normalizar(datos$hp)
# Calcular estadísticas
medias <- colMeans(datos[, c("mpg", "hp", "wt")])
desviaciones <- apply(datos[, c("mpg", "hp", "wt")], 2, sd)
# Crear gráfico
# Este código usará los datos procesados arriba
',
mode = "r",
theme = "chrome",
height = "200px",
fontSize = 14,
showLineNumbers = TRUE
)
)
),
layout_column_wrap(
width = "100%",
card(
card_header("Código combinado"),
verbatimTextOutput("combined_code"),
actionButton("run_combined", "Ejecutar código combinado", class = "btn-success mt-2"),
verbatimTextOutput("combined_result")
)
),
layout_column_wrap(
width = "100%",
card(
card_header("Visualización del código combinado"),
plotOutput("combined_plot", height = "250px")
)
)
),
card(
card_header("Interacción con Datos Externos"),
layout_column_wrap(
width = "400px",
# Panel para cargar datos Excel
card(
card_header("Cargar datos Excel"),
fileInput("excel_file", "Seleccionar archivo Excel:",
accept = c(".xlsx", ".xls")),
selectInput("sheet", "Seleccionar hoja:", choices = NULL),
actionButton("load_data", "Cargar datos", class = "btn-primary"),
verbatimTextOutput("data_preview")
),
# Panel para editar código que utiliza los datos cargados
card(
card_header("Código para analizar datos"),
aceEditor(
outputId = "data_code",
value = '# El dataframe importado está disponible como "imported_data"\n\n# Mostrar las primeras filas\nhead(imported_data, 10)\n\n# Resumen básico\nsummary(imported_data)',
mode = "r",
theme = "chrome",
height = "200px"
),
actionButton("run_data_code", "Ejecutar análisis", class = "btn-success mt-2"),
verbatimTextOutput("data_analysis_result")
)
)
),
card(
card_header("Visualización de datos importados"),
plotOutput("data_plot", height = "300px"),
p("Ejecuta código que genere un gráfico para visualizar los datos importados.")
),
card(
card_header("Código interactivo editable"),
aceEditor(
outputId = "editable_code",
value = 'x <- 1:10\ny <- x^2\nplot(x, y, type = "b", col = "blue", main = "Gráfico cuadrático")',
mode = "r",
theme = "textmate",
height = "150px"
),
actionButton("run_code", "Ejecutar código", class = "btn-primary mt-2"),
card_footer(
plotOutput("result_plot", height = "250px")
)
)
)
server <- function(input, output, session) {
# ---- COMBINAR SCRIPTS CON NUMERACIÓN CONTINUA ----
# Combinar código de los dos editores
combined_code <- reactive({
paste0(input$script_part1, "\n\n", input$script_part2)
})
# Mostrar código combinado
output$combined_code <- renderText({
combined_code()
})
# Ejecutar el código combinado
observeEvent(input$run_combined, {
code <- combined_code()
tryCatch({
# Entorno para ejecutar el código
env <- new.env()
# Capturar la salida de la consola
result_capture <- capture.output({
# Ejecutar el código y guardar resultados en el entorno
eval(parse(text = code), envir = env)
})
# Mostrar resultados de la consola
output$combined_result <- renderPrint({
cat(paste(result_capture, collapse = "\n"))
# Mostrar también las variables creadas
cat("\n\n-- Variables en el entorno --\n")
ls_vars <- ls(env)
for (var_name in ls_vars) {
if (!is.function(env[[var_name]])) {
if (is.data.frame(env[[var_name]])) {
cat(var_name, ": dataframe con ", nrow(env[[var_name]]), " filas y ",
ncol(env[[var_name]]), " columnas\n", sep = "")
} else if (is.vector(env[[var_name]]) && length(env[[var_name]]) <= 10) {
cat(var_name, ": ", paste(env[[var_name]], collapse = ", "), "\n", sep = "")
} else {
cat(var_name, ": objeto de clase ", class(env[[var_name]]), "\n", sep = "")
}
}
}
})
# Intentar generar un gráfico
output$combined_plot <- renderPlot({
# Crear un entorno con los objetos del entorno donde se ejecutó el código
plot_env <- new.env(parent = globalenv())
for (var_name in ls(env)) {
plot_env[[var_name]] <- env[[var_name]]
}
# Crear código de gráfico básico basado en los datos disponibles
if (exists("datos", envir = env) && is.data.frame(env$datos)) {
with(env$datos, plot(mpg, hp, col = "blue", pch = 16,
main = "Relación entre MPG y HP",
xlab = "Millas por galón", ylab = "Caballos de fuerza"))
if (exists("mpg_norm", envir = env$datos) && exists("hp_norm", envir = env$datos)) {
with(env$datos, points(mpg_norm, hp_norm, col = "red", pch = 17))
legend("topright", legend = c("Original", "Normalizado"),
col = c("blue", "red"), pch = c(16, 17))
}
}
})
}, error = function(e) {
output$combined_result <- renderPrint({
cat("Error en la ejecución:", e$message)
})
})
})
# ---- INTERACCIÓN CON DATOS EXTERNOS ----
# Variables reactivas para datos importados
imported_data <- reactiveVal(NULL)
available_sheets <- reactiveVal(NULL)
# Detectar hojas cuando se selecciona un archivo Excel
observeEvent(input$excel_file, {
req(input$excel_file)
sheets <- excel_sheets(input$excel_file$datapath)
available_sheets(sheets)
updateSelectInput(session, "sheet", choices = sheets)
})
# Cargar datos desde Excel
observeEvent(input$load_data, {
req(input$excel_file, input$sheet)
tryCatch({
data <- read_excel(input$excel_file$datapath, sheet = input$sheet)
imported_data(data)
output$data_preview <- renderPrint({
head(data, 5)
})
}, error = function(e) {
output$data_preview <- renderPrint({
cat("Error al cargar los datos:", e$message)
})
})
})
# Ejecutar código para analizar datos importados
observeEvent(input$run_data_code, {
req(imported_data())
tryCatch({
# Crear un entorno para la ejecución segura del código
env <- new.env()
# Asignar los datos importados a este entorno
env$imported_data <- imported_data()
# Ejecutar el código del usuario en este entorno
result_capture <- capture.output(
eval(parse(text = input$data_code), envir = env)
)
# Mostrar resultados
output$data_analysis_result <- renderPrint({
cat(paste(result_capture, collapse = "\n"))
})
# Intentar generar un gráfico si el código lo permite
output$data_plot <- renderPlot({
eval(parse(text = input$data_code), envir = env)
})
}, error = function(e) {
output$data_analysis_result <- renderPrint({
cat("Error en el análisis:", e$message)
})
})
})
# Código interactivo ejecutable
observeEvent(input$run_code, {
tryCatch({
output$result_plot <- renderPlot({
eval(parse(text = input$editable_code))
})
}, error = function(e) {
output$result_plot <- renderPlot({
plot(0, 0, type = "n", axes = FALSE, xlab = "", ylab = "")
text(0, 0, paste("Error:", e$message), col = "red")
})
})
})
}
shinyApp(ui = ui, server =server)
devtools::load_all()
Rscience2:::run_app()
remotes::install_github("deliaspanigo/Rscience.import")
remotes::install_github("deliaspanigo/Rscience.GeneralLM")
devtools::load_all()
Rscience.GeneralLM:::run_app()
remotes::install_github("deliaspanigo/Rscience.import")
Rscience2:::run_app()
remove.packages("Rscience.import")
######################################
# Desinstalar el paquete
remove.packages("Rscience2")
remove.packages("Rscience.import")
remove.packages("Rscience.GeneralLM")
remotes::install_github("deliaspanigo/Rscience.import")
remotes::install_github("deliaspanigo/Rscience.GeneralLM")
devtools::load_all()
devtools::document()  # Actualiza documentación
devtools::build()     # Arma el paquete para mi
########################################
library(Rscience2)
Rscience2::run_app()
devtools::load_all()
Rscience2:::run_app()
remotes::install_github("deliaspanigo/Rscience.import")
remotes::install_github("deliaspanigo/Rscience.GeneralLM")
devtools::load_all()
devtools::document()  # Actualiza documentación
devtools::build()     # Arma el paquete para mi
Rscience.GeneralLM::run_app()
library(Rscience.GeneralLM)
Rscience.GeneralLM::run_app()
remotes::install_github("deliaspanigo/Rscience.import")
remotes::install_github("deliaspanigo/Rscience.GeneralLM")
devtools::load_all()
devtools::document()  # Actualiza documentación
Rscience2:::run_app()
remotes::install_github("deliaspanigo/Rscience.import")
remotes::install_github("deliaspanigo/Rscience.GeneralLM")
devtools::install()
########################################
library(Rscience2)
Rscience2::run_app()
Rscience2:::run_app()
devtools::load_all()
# Instalar nuevamente
devtools::install()
devtools::load_all()
devtools::document()  # Actualiza documentación
devtools::build()     # Arma el paquete para mi
# Instalar el paquete
devtools::install()
Rscience2:::run_app()
remotes::install_github("deliaspanigo/Rscience.import")
remotes::install_github("deliaspanigo/Rscience.GeneralLM")
devtools::load_all()
Rscience.GeneralLM:::run_app()
devtools::load_all()
Rscience2:::run_app()
devtools::install()
########################################
library(Rscience2)
Rscience2::run_app()
